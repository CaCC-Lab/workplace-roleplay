name: Deploy to Azure VM Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PYTHON_VERSION: '3.10'
  VM_HOST: workplace-roleplay.cacc-lab.net
  VM_USER: ryu
  APP_PATH: /home/ryu/workplace-roleplay
  SERVICE_NAME: workplace-roleplay

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run linting
        run: |
          flake8 . --max-line-length=120 --exclude=venv,__pycache__
          black --check .
      
      - name: Run type checking
        run: mypy . --ignore-missing-imports
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=. --cov-report=xml
        continue-on-error: true  # テストが未実装の場合も続行

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.VM_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz \
            --exclude='.git' \
            --exclude='venv' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.env' \
            --exclude='flask_session' \
            --exclude='cookies.txt' \
            .
      
      - name: Deploy to Azure VM
        run: |
          # Copy deployment package
          scp -i ~/.ssh/id_rsa deployment.tar.gz ${{ env.VM_USER }}@${{ env.VM_HOST }}:/tmp/
          
          # Execute deployment script
          ssh -i ~/.ssh/id_rsa ${{ env.VM_USER }}@${{ env.VM_HOST }} << 'ENDSSH'
            set -e
            
            # Backup current deployment
            if [ -d "${{ env.APP_PATH }}" ]; then
              sudo cp -r ${{ env.APP_PATH }} ${{ env.APP_PATH }}.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Create app directory if not exists
            mkdir -p ${{ env.APP_PATH }}
            
            # Extract new deployment
            tar -xzf /tmp/deployment.tar.gz -C ${{ env.APP_PATH }}
            rm /tmp/deployment.tar.gz
            
            # Setup virtual environment
            cd ${{ env.APP_PATH }}
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Copy environment variables (ensure .env exists on server)
            if [ -f /home/${{ env.VM_USER }}/.env.production ]; then
              cp /home/${{ env.VM_USER }}/.env.production ${{ env.APP_PATH }}/.env
            fi
            
            # Restart application service
            sudo systemctl restart ${{ env.SERVICE_NAME }}
            sleep 5
            
            # Health check
            if ! curl -f http://localhost:5000/health; then
              echo "Health check failed, rolling back..."
              if [ -d "${{ env.APP_PATH }}.backup.*" ]; then
                latest_backup=$(ls -t ${{ env.APP_PATH }}.backup.* | head -1)
                sudo rm -rf ${{ env.APP_PATH }}
                sudo mv $latest_backup ${{ env.APP_PATH }}
                sudo systemctl restart ${{ env.SERVICE_NAME }}
              fi
              exit 1
            fi
            
            echo "Deployment successful!"
          ENDSSH
      
      - name: Verify deployment
        run: |
          sleep 10
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.VM_HOST }})
          if [ "$response" -eq 200 ]; then
            echo "Application is running successfully!"
          else
            echo "Application verification failed with status code: $response"
            exit 1
          fi
      
      - name: Clean up old backups
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.VM_USER }}@${{ env.VM_HOST }} << 'ENDSSH'
            # Keep only last 5 backups
            cd /home/${{ env.VM_USER }}
            ls -t workplace-roleplay.backup.* 2>/dev/null | tail -n +6 | xargs -r rm -rf
          ENDSSH

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send deployment notification
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.deploy.result }}' === 'success' ? '✅' : '❌';
            const message = `Deployment to production: ${status}`;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ needs.deploy.result }}' === 'success' ? 'success' : 'failure',
              description: message,
              context: 'continuous-deployment'
            });