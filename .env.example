# OpenAI API キー
# 取得方法: https://platform.openai.com/ でアカウント作成後、APIキーを発行
OPENAI_API_KEY=your_openai_api_key_here

# Google AI (Gemini) API キー 
# 取得方法: https://aistudio.google.com/ でアカウント作成後、APIキーを発行
GOOGLE_API_KEY=your_google_api_key_here

# Flaskセッション用シークレットキー（必須）
# セキュリティ要件:
#   - 最小32文字以上（推奨: 開発環境32文字、本番環境64文字）
#   - 大文字・小文字・数字・特殊文字を含む
#   - 予測可能なパターンを避ける
#   - デフォルト値や弱いキーは自動的に拒否されます
#
# 生成方法:
#   開発環境: python scripts/generate_secret_key.py
#   本番環境: python scripts/generate_secret_key.py --length 64
#   キー検証: python scripts/generate_secret_key.py --check "your-existing-key"
#
# 簡易生成: python -c "import secrets; print(secrets.token_urlsafe(48))"
# 注意: この値は必須です。設定されていない場合、アプリケーションは起動しません
FLASK_SECRET_KEY=

# PostgreSQL データベース設定
# デフォルト値はローカル開発用の設定です
DB_HOST=localhost
DB_PORT=5432
DB_NAME=workplace_roleplay
DB_USER=postgres
DB_PASSWORD=CHANGE_THIS_STRONG_PASSWORD_MINIMUM_16_CHARS

# Redis設定（セッションタイプがredisの場合は必須）
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Celery設定（非同期タスク処理を使用する場合）
# デフォルトでは上記のRedis設定を使用します
# カスタマイズする場合は以下を設定してください
# CELERY_BROKER_URL=redis://localhost:6379/0
# CELERY_RESULT_BACKEND=redis://localhost:6379/0

# セッション設定
# filesystem: ローカルファイルシステム（デフォルト）
# redis: Redis（スケーラブル環境向け）
SESSION_TYPE=filesystem

# 環境設定
# development: 開発環境
# production: 本番環境
# testing: テスト環境
FLASK_ENV=development

# デバッグモード（本番環境では必ずFalseに設定）
FLASK_DEBUG=False

# ログレベル
# DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# アプリケーション設定
# APIタイムアウト（秒）
API_TIMEOUT=30

# 最大リクエストサイズ（バイト）
MAX_CONTENT_LENGTH=16777216  # 16MB

# CSRFトークンの有効期限（秒）
WTF_CSRF_TIME_LIMIT=3600  # 1時間
